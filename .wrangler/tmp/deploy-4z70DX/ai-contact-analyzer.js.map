{
  "version": 3,
  "sources": ["../../../functions/ai-contact-analyzer.js"],
  "sourceRoot": "C:\\Users\\RCormier\\Downloads\\cursor-dev\\tanstack-portfolio\\.wrangler\\tmp\\deploy-4z70DX",
  "sourcesContent": ["// AI-powered contact form analyzer using Cloudflare AI\n// HARDENED VERSION with security, privacy, and abuse prevention\n\n// PII and sensitive data patterns to filter out\nconst SENSITIVE_PATTERNS = {\n  email: /\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b/g,\n  phone: /\\b(\\+\\d{1,3}[-.\\s]?)?\\(?\\d{3}\\)?[-.\\s]?\\d{3}[-.\\s]?\\d{4}\\b/g,\n  creditCard: /\\b\\d{4}[-.\\s]?\\d{4}[-.\\s]?\\d{4}[-.\\s]?\\d{4}\\b/g,\n  ssn: /\\b\\d{3}-\\d{2}-\\d{4}\\b/g,\n  apiKey: /\\b(api[_-]?key|token|secret|password)[\\s]*[:=][\\s]*['\"]?[A-Za-z0-9._-]{10,}['\"]?/gi,\n  oauth: /\\b(oauth|bearer)[\\s]*[:=][\\s]*['\"]?[A-Za-z0-9._-]{20,}['\"]?/gi\n}\n\n// Rate limiting configuration\nconst RATE_LIMITS = {\n  requestsPerMinute: 5, // Reduced from 10 for anonymous traffic\n  requestsPerHour: 20,\n  burstLimit: 3\n}\n\n// Strict JSON schema for AI analysis\nconst ANALYSIS_SCHEMA = {\n  inquiryType: ['consultation', 'project', 'partnership', 'general', 'urgent'],\n  priorityLevel: ['high', 'medium', 'low'],\n  industry: ['technology', 'healthcare', 'finance', 'manufacturing', 'other'],\n  projectScope: ['small', 'medium', 'large', 'enterprise'],\n  urgency: ['immediate', 'soon', 'flexible'],\n  meetingType: ['consultation', 'project-planning', 'technical-review', 'strategy-session', 'general-discussion'],\n  confidence: { min: 0, max: 1 },\n  redFlags: { type: 'array', maxLength: 5 },\n  followUpQuestions: { type: 'array', maxLength: 3 }\n}\n\n// CORS headers helper function\nfunction addCorsHeaders(response, status = 200) {\n  const headers = new Headers(response.headers || {})\n  headers.set('Access-Control-Allow-Origin', '*')\n  headers.set('Access-Control-Allow-Methods', 'GET, POST, PUT, DELETE, OPTIONS')\n  headers.set('Access-Control-Allow-Headers', 'Content-Type, Authorization, Accept')\n  \n  return new Response(response.body, {\n    status,\n    headers\n  })\n}\n\n// PII and sensitive data scrubber\nfunction scrubSensitiveData(text) {\n  if (!text || typeof text !== 'string') return text\n  \n  let scrubbed = text\n  \n  // Replace sensitive patterns with placeholders\n  Object.entries(SENSITIVE_PATTERNS).forEach(([type, pattern]) => {\n    scrubbed = scrubbed.replace(pattern, `[${type.toUpperCase()}_REDACTED]`)\n  })\n  \n  // Additional business logic checks\n  const suspiciousPatterns = [\n    /\\b(crypto|bitcoin|ethereum|wallet)\\b/gi,\n    /\\b(seo|backlink|ranking|traffic)\\b/gi,\n    /\\b(loan|mortgage|refinance|debt)\\b/gi,\n    /(https?:\\/\\/[^\\s]+)/g, // URLs\n    /(\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b)/g // Emails again\n  ]\n  \n  suspiciousPatterns.forEach(pattern => {\n    scrubbed = scrubbed.replace(pattern, '[SUSPICIOUS_CONTENT]')\n  })\n  \n  return scrubbed\n}\n\n// Rate limiting with IP tracking (KV optional)\nasync function checkRateLimit(request, env) {\n  // If KV is not available, skip rate limiting\n  if (!env.KV) {\n    console.warn('KV not available, skipping rate limiting')\n    return true\n  }\n  \n  const clientIP = request.headers.get('CF-Connecting-IP') || \n                   request.headers.get('X-Forwarded-For') || \n                   'unknown'\n  \n  const now = Date.now()\n  const minuteKey = `rate_limit:${clientIP}:${Math.floor(now / 60000)}`\n  const hourKey = `rate_limit:${clientIP}:${Math.floor(now / 3600000)}`\n  \n  try {\n    // Get current counts\n    const [minuteCount, hourCount] = await Promise.all([\n      env.KV.get(minuteKey, { type: 'text' }).then(v => parseInt(v) || 0),\n      env.KV.get(hourKey, { type: 'text' }).then(v => parseInt(v) || 0)\n    ])\n    \n    // Check limits\n    if (minuteCount >= RATE_LIMITS.requestsPerMinute) {\n      throw new Error('Rate limit exceeded: too many requests per minute')\n    }\n    \n    if (hourCount >= RATE_LIMITS.requestsPerHour) {\n      throw new Error('Rate limit exceeded: too many requests per hour')\n    }\n    \n    // Increment counters with expiration\n    await Promise.all([\n      env.KV.put(minuteKey, (minuteCount + 1).toString(), { expirationTtl: 60 }),\n      env.KV.put(hourKey, (hourCount + 1).toString(), { expirationTtl: 3600 })\n    ])\n    \n    return true\n  } catch (error) {\n    if (error.message.includes('Rate limit exceeded')) {\n      throw error\n    }\n    // If KV is unavailable, allow request but log\n    console.warn('Rate limiting unavailable, allowing request')\n    return true\n  }\n}\n\n// Validate and sanitize input data with enhanced security\nfunction validateInput(data) {\n  console.log('\uD83D\uDD0D Validating input data:', JSON.stringify(data, null, 2))\n  \n  const { name, email, company, subject, message, consent } = data\n  \n  console.log('\uD83D\uDD0D Extracted fields:', { name, email, company, subject, message, consent })\n  \n  // Check required fields\n  if (!name || !subject || !message) {\n    console.error('\u274C Missing required fields:', { name: !!name, subject: !!subject, message: !!message })\n    throw new Error('Missing required fields')\n  }\n  \n  // Check explicit consent for AI analysis\n  if (!consent || consent !== 'true') {\n    throw new Error('Explicit consent required for AI analysis')\n  }\n  \n  // Validate email format if provided\n  if (email) {\n    const emailRegex = /^[^\\s@]+@[^\\s@]+\\.[^\\s@]+$/\n    if (!emailRegex.test(email)) {\n      throw new Error('Invalid email format')\n    }\n  }\n  \n  // Check for honeypot field (hidden field that should be empty)\n  if (data.honeypot && data.honeypot.trim() !== '') {\n    throw new Error('Form submission rejected')\n  }\n  \n  // Sanitize inputs (enhanced XSS prevention)\n  const sanitize = (str) => {\n    if (!str || typeof str !== 'string') return ''\n    return str\n      .replace(/[<>]/g, '') // Remove angle brackets\n      .replace(/javascript:/gi, '') // Remove javascript: protocol\n      .replace(/on\\w+=/gi, '') // Remove event handlers\n      .trim()\n      .substring(0, 1000) // Limit length\n  }\n  \n  const sanitized = {\n    name: sanitize(name),\n    email: email ? sanitize(email) : '',\n    company: company ? sanitize(company) : '',\n    subject: sanitize(subject),\n    message: sanitize(message)\n  }\n  \n  // Validate lengths\n  if (sanitized.name.length < 2 || sanitized.name.length > 100) {\n    throw new Error('Invalid name length')\n  }\n  \n  if (sanitized.subject.length < 5 || sanitized.subject.length > 200) {\n    throw new Error('Invalid subject length')\n  }\n  \n  if (sanitized.message.length < 20 || sanitized.message.length > 2000) {\n    throw new Error('Invalid message length')\n  }\n  \n  return sanitized\n}\n\n// Validate AI response against schema\nfunction validateAIResponse(response) {\n  try {\n    if (!response || typeof response !== 'object') {\n      throw new Error('Invalid response format')\n    }\n    \n    // Check required fields\n    const required = ['inquiryType', 'priorityLevel', 'industry', 'projectScope', 'urgency']\n    for (const field of required) {\n      if (!response[field]) {\n        throw new Error(`Missing required field: ${field}`)\n      }\n    }\n    \n    // Validate enum values\n    if (!ANALYSIS_SCHEMA.inquiryType.includes(response.inquiryType)) {\n      response.inquiryType = 'general'\n    }\n    \n    if (!ANALYSIS_SCHEMA.priorityLevel.includes(response.priorityLevel)) {\n      response.priorityLevel = 'medium'\n    }\n    \n    if (!ANALYSIS_SCHEMA.industry.includes(response.industry)) {\n      response.industry = 'other'\n    }\n    \n    if (!ANALYSIS_SCHEMA.projectScope.includes(response.projectScope)) {\n      response.projectScope = 'medium'\n    }\n    \n    if (!ANALYSIS_SCHEMA.urgency.includes(response.urgency)) {\n      response.urgency = 'flexible'\n    }\n    \n    // Validate confidence score\n    if (typeof response.confidence !== 'number' || \n        response.confidence < ANALYSIS_SCHEMA.confidence.min || \n        response.confidence > ANALYSIS_SCHEMA.confidence.max) {\n      response.confidence = 0.7\n    }\n    \n    // Ensure arrays exist and are within limits\n    if (!Array.isArray(response.redFlags)) {\n      response.redFlags = []\n    } else {\n      response.redFlags = response.redFlags.slice(0, ANALYSIS_SCHEMA.redFlags.maxLength)\n    }\n    \n         if (!Array.isArray(response.followUpQuestions)) {\n       response.followUpQuestions = []\n     } else {\n               // Filter out placeholder text and ensure actual questions\n        response.followUpQuestions = response.followUpQuestions\n          .filter(question => {\n            if (!question || typeof question !== 'string') return false\n            \n            const questionLower = question.toLowerCase().trim()\n            \n            // Remove placeholder text variations\n            if (questionLower.includes('1-3') || questionLower.includes('clarifying questions if needed')) return false\n            if (questionLower.includes('array of') || questionLower.includes('security concerns if any')) return false\n            if (questionLower.includes('specific question') && questionLower.match(/specific question \\d+/)) return false\n            if (questionLower.includes('follow-up questions') && questionLower.includes('if needed')) return false\n            if (questionLower.includes('questions if needed')) return false\n            if (questionLower.includes('clarifying questions')) return false\n            \n            // Filter out very short or generic text\n            if (question.length < 10) return false\n            if (questionLower === 'questions' || questionLower === 'follow-ups' || questionLower === 'followups') return false\n            \n            return question.trim().length > 0\n          })\n          .slice(0, ANALYSIS_SCHEMA.followUpQuestions.maxLength)\n     }\n    \n    return response\n  } catch (error) {\n    throw new Error(`AI response validation failed: ${error.message}`)\n  }\n}\n\n// Calculate confidence based on data quality and completeness\nfunction calculateConfidence({ name, email, company, subject, message, analysis }) {\n  let confidence = 0.0\n  \n  // Base confidence from required fields (35%)\n  if (name && name.trim().length > 0) confidence += 0.12\n  if (email && email.includes('@') && email.includes('.')) confidence += 0.13\n  if (subject && subject.trim().length > 0) confidence += 0.10\n  \n  // Message quality (35%)\n  const messageLength = message.trim().length\n  if (messageLength >= 100) confidence += 0.35\n  else if (messageLength >= 80) confidence += 0.30\n  else if (messageLength >= 60) confidence += 0.25\n  else if (messageLength >= 40) confidence += 0.20\n  else if (messageLength >= 30) confidence += 0.15\n  else if (messageLength >= 20) confidence += 0.10\n  else confidence += 0.05\n  \n  // Company information (10%)\n  if (company && company.trim().length > 0) confidence += 0.10\n  \n  // Email domain quality (5%)\n  const emailDomain = email ? email.split('@')[1] || '' : ''\n  if (emailDomain && emailDomain !== 'gmail.com' && emailDomain !== 'yahoo.com' && emailDomain !== 'hotmail.com') {\n    confidence += 0.05\n  }\n  \n  // Subject specificity (5%)\n  const subjectWords = subject.trim().split(' ').length\n  if (subjectWords >= 5) confidence += 0.05\n  else if (subjectWords >= 3) confidence += 0.03\n  else confidence += 0.01\n  \n  // Message content indicators (10%)\n  const hasProjectKeywords = /project|development|implementation|integration|modernization|migration|consultation|strategy/i.test(message)\n  const hasTechnicalTerms = /api|database|cloud|saas|devops|ci\\/cd|automation|system|platform|web|app|application/i.test(message)\n  const hasBusinessTerms = /business|enterprise|company|organization|team|leadership|management|process|startup/i.test(message)\n  \n  if (hasProjectKeywords) confidence += 0.03\n  if (hasTechnicalTerms) confidence += 0.03\n  if (hasBusinessTerms) confidence += 0.04\n  \n  // AI analysis quality bonus (up to 5%)\n  if (analysis.inquiryType && analysis.inquiryType !== 'general') confidence += 0.02\n  if (analysis.industry && analysis.industry !== 'other') confidence += 0.02\n  if (analysis.projectScope && analysis.projectScope !== 'medium') confidence += 0.01\n  \n  // Penalties for low-quality data\n  if (messageLength < 20) confidence -= 0.25\n  else if (messageLength < 40) confidence -= 0.20\n  else if (messageLength < 60) confidence -= 0.15\n  else if (messageLength < 80) confidence -= 0.10\n  \n  // Heavy penalty for incomplete sentences (no period, question mark, or exclamation at end)\n  if (messageLength > 0 && !/[.!?]$/.test(message.trim())) {\n    confidence -= 0.20\n  }\n  \n  // Additional penalty for very short incomplete thoughts\n  if (messageLength < 50 && !/[.!?]$/.test(message.trim())) {\n    confidence -= 0.15\n  }\n  \n  if (subjectWords < 2) confidence -= 0.03\n  if (emailDomain && (emailDomain === 'gmail.com' || emailDomain === 'yahoo.com' || emailDomain === 'hotmail.com')) {\n    confidence -= 0.02\n  }\n  \n  // Cap at 1.0 and ensure minimum of 0.10\n  confidence = Math.min(Math.max(confidence, 0.10), 1.0)\n  \n  // Round to 2 decimal places\n  return Math.round(confidence * 100) / 100\n}\n\n\n\n// Parse AI response more robustly\nfunction parseAIResponse(aiResponse) {\n  try {\n    // Handle different response formats\n    let jsonText = aiResponse\n    \n    if (typeof aiResponse === 'string') {\n      // Remove markdown code block formatting - handle both ```json and ``` blocks\n      const jsonMatch = aiResponse.match(/```(?:json)?\\s*([\\s\\S]*?)\\s*```/)\n      if (jsonMatch) {\n        jsonText = jsonMatch[1].trim()\n      }\n      // Also try to extract JSON from the response if it's not in code blocks\n      else if (aiResponse.includes('{') && aiResponse.includes('}')) {\n        const startBrace = aiResponse.indexOf('{')\n        const endBrace = aiResponse.lastIndexOf('}')\n        if (startBrace !== -1 && endBrace !== -1 && endBrace > startBrace) {\n          jsonText = aiResponse.substring(startBrace, endBrace + 1)\n        }\n      }\n      \n      // If we still don't have valid JSON, try to find the first complete JSON object\n      if (!jsonText.match(/^\\{.*\\}$/s)) {\n        const jsonObjects = aiResponse.match(/\\{[^{}]*(?:\\{[^{}]*\\}[^{}]*)*\\}/g)\n        if (jsonObjects && jsonObjects.length > 0) {\n          // Use the longest JSON object found\n          jsonText = jsonObjects.reduce((longest, current) => \n            current.length > longest.length ? current : longest\n          )\n        }\n      }\n      \n      // Clean up any remaining markdown artifacts\n      jsonText = jsonText.replace(/^```.*$/gm, '').replace(/^`.*`$/gm, '').trim()\n      \n      // Additional cleaning for common AI response artifacts\n      jsonText = jsonText.replace(/^Here's the analysis:/i, '')\n      jsonText = jsonText.replace(/^Analysis:/i, '')\n      jsonText = jsonText.replace(/^Response:/i, '')\n      jsonText = jsonText.replace(/^JSON:/i, '')\n      jsonText = jsonText.replace(/^Here is the JSON:/i, '')\n      jsonText = jsonText.trim()\n    }\n    \n    // Attempt to parse the cleaned JSON text\n    const result = JSON.parse(jsonText)\n    \n    // Validate that we got a proper object\n    if (!result || typeof result !== 'object') {\n      throw new Error('AI response is not a valid object')\n    }\n    \n    return result\n  } catch (parseError) {\n    console.warn('Failed to parse AI response as JSON:', parseError.message)\n    console.warn('Raw AI response was:', aiResponse)\n    throw new Error('Invalid AI response format')\n  }\n}\n\n// Enhanced system prompt with security guardrails\nconst SYSTEM_PROMPT = `You are an AI assistant analyzing business inquiries for a technology leadership portfolio.\n\nSECURITY POLICY:\n- NEVER include personal information, emails, phone numbers, or sensitive data in responses\n- NEVER suggest actions that could compromise security\n- NEVER provide technical details about system architecture or security measures\n- If you detect suspicious content, flag it in redFlags array\n\nANALYSIS REQUIREMENTS:\n- Return ONLY valid JSON matching the exact schema\n- Use low temperature (0.1) for consistent classification\n- Focus on business inquiry analysis and meeting recommendations\n- Provide clear reasoning for recommendations\n\nOUTPUT SCHEMA:\n{\n  \"inquiryType\": \"consultation|project|partnership|general|urgent\",\n  \"priorityLevel\": \"high|medium|low\",\n  \"industry\": \"technology|healthcare|finance|manufacturing|other\",\n  \"projectScope\": \"small|medium|large|enterprise\",\n  \"urgency\": \"immediate|soon|flexible\",\n  \"suggestedResponse\": \"2-3 sentence personalized response\",\n  \"relevantContent\": [\"portfolio sections\"],\n  \"shouldScheduleMeeting\": true/false,\n  \"meetingType\": \"consultation|project-planning|technical-review|strategy-session|general-discussion\",\n  \"recommendedTimeSlots\": [\"morning\", \"afternoon\", \"evening\"],\n  \"timezoneConsideration\": \"user's local timezone\",\n  \"followUpRequired\": true/false,\n  \"redFlags\": [\"array of security concerns if any\"],\n  \"followUpQuestions\": [\"specific question 1\", \"specific question 2\", \"specific question 3\"]\n}\n\nSet shouldScheduleMeeting=true for consultation/project/technical discussions.\nReturn ONLY the JSON object, no additional text.`\n\nexport default {\n  async fetch(request, env, ctx) {\n    // Handle CORS preflight request\n    if (request.method === 'OPTIONS') {\n      console.log('CORS preflight request received')\n      return new Response(null, {\n        status: 200,\n        headers: {\n          'Access-Control-Allow-Origin': '*',\n          'Access-Control-Allow-Methods': 'GET, POST, PUT, DELETE, OPTIONS',\n          'Access-Control-Allow-Headers': 'Content-Type, Authorization, Accept',\n          'Access-Control-Max-Age': '86400',\n        },\n      })\n    }\n\n    // Handle health check\n    if (request.method === 'GET') {\n      return addCorsHeaders(new Response(JSON.stringify({\n        status: 'healthy',\n        timestamp: new Date().toISOString(),\n        cors: 'enabled'\n      }), {\n        status: 200,\n        headers: { 'Content-Type': 'application/json' }\n      }))\n    }\n\n    if (request.method !== 'POST') {\n      return addCorsHeaders(new Response('Method not allowed', { \n        status: 405,\n        headers: { 'Content-Type': 'text/plain' }\n      }))\n    }\n\n    try {\n      // Check rate limits first\n      await checkRateLimit(request, env)\n      \n      const rawData = await request.json()\n      \n      // Debug: Log the received data\n      console.log('\uD83D\uDCE5 Received data:', JSON.stringify(rawData, null, 2))\n      \n      // Validate and sanitize input\n      const { name, email, company, subject, message } = validateInput(rawData)\n\n      // Scrub sensitive data before AI analysis\n      const scrubbedMessage = scrubSensitiveData(message)\n      const scrubbedSubject = scrubSensitiveData(subject)\n      \n      // Check for suspicious content patterns\n      const suspiciousPatterns = [\n        /\\b(crypto|bitcoin|ethereum|wallet)\\b/gi,\n        /\\b(seo|backlink|ranking|traffic)\\b/gi,\n        /\\b(loan|mortgage|refinance|debt)\\b/gi,\n        /(https?:\\/\\/[^\\s]+)/g,\n        /(\\b[A-Za-z0-9._%+-]+@[A-Za-z0-9.-]+\\.[A-Z|a-z]{2,}\\b)/g\n      ]\n      \n      const redFlags = []\n      suspiciousPatterns.forEach(pattern => {\n        if (pattern.test(scrubbedMessage + ' ' + scrubbedSubject)) {\n          redFlags.push('suspicious_content_detected')\n        }\n      })\n      \n      // If too many red flags, return early with safe response\n      if (redFlags.length > 2) {\n        return addCorsHeaders(new Response(JSON.stringify({\n          inquiryType: 'general',\n          priorityLevel: 'low',\n          industry: 'other',\n          projectScope: 'small',\n          urgency: 'flexible',\n          suggestedResponse: 'Thank you for your message. I\\'ll review it and get back to you soon.',\n          relevantContent: ['general portfolio'],\n          shouldScheduleMeeting: false,\n          meetingType: 'general-discussion',\n          recommendedTimeSlots: ['morning', 'afternoon'],\n          timezoneConsideration: 'user\\'s local timezone',\n          followUpRequired: false,\n          redFlags,\n          followUpQuestions: [],\n          confidence: 0.3,\n          timestamp: new Date().toISOString(),\n          originalMessage: '[CONTENT_REVIEWED]',\n          wordCount: 0,\n          hasCompany: !!company,\n          emailDomain: email ? email.split('@')[1] || 'unknown' : 'unknown',\n          fallback: true\n        }), {\n          status: 200,\n          headers: {\n            'Content-Type': 'application/json',\n          },\n        }))\n      }\n\n      // Calculate meeting duration deterministically BEFORE AI analysis\n      const messageLower = scrubbedMessage.toLowerCase()\n      const subjectLower = scrubbedSubject.toLowerCase()\n      \n      // Analyze message content for deterministic meeting duration\n      let deterministicDuration = '1 hour' // default\n      \n      // Check for urgency indicators\n      const hasUrgentKeywords = /urgent|asap|immediately|emergency|critical|deadline|rush/i.test(messageLower + ' ' + subjectLower)\n      const hasComplexKeywords = /complex|complicated|detailed|comprehensive|extensive|multiple|several|various/i.test(messageLower)\n      const hasProjectKeywords = /project|development|implementation|integration|migration|modernization|strategy|planning/i.test(messageLower)\n      const hasTechnicalKeywords = /technical|architecture|system|platform|api|database|infrastructure|devops/i.test(messageLower)\n      const hasSimpleKeywords = /quick|simple|basic|question|inquiry|discussion|chat/i.test(messageLower)\n      \n      if (hasUrgentKeywords || hasComplexKeywords || (hasProjectKeywords && hasTechnicalKeywords)) {\n        deterministicDuration = '2 hours'\n      } else if (hasProjectKeywords || hasTechnicalKeywords) {\n        deterministicDuration = '1.5 hours'\n      } else if (hasSimpleKeywords) {\n        deterministicDuration = '30 minutes'\n      } else {\n        deterministicDuration = '1 hour'\n      }\n\n            // Use Cloudflare AI to analyze the message\n      let aiResponse\n      try {\n        // Try with the correct model name\n        // Streamlined AI prompt to reduce neuron usage\n        aiResponse = await env.ai.run('@cf/meta/llama-2-7b-chat-int8', {\n          messages: [{\n            role: 'user',\n            content: `Analyze: ${name} (${company || 'N/A'}) - ${scrubbedSubject}\nMessage: ${scrubbedMessage}\n\nReturn JSON:\n{\n  \"inquiryType\": \"consultation|project|partnership|general|urgent\",\n  \"priorityLevel\": \"high|medium|low\",\n  \"industry\": \"technology|healthcare|finance|manufacturing|other\", \n  \"projectScope\": \"small|medium|large|enterprise\",\n  \"urgency\": \"immediate|soon|flexible\",\n  \"shouldScheduleMeeting\": true/false,\n  \"meetingType\": \"consultation|project-planning|technical-review|strategy-session|general-discussion\",\n  \"followUpQuestions\": [\"2-3 specific questions about missing info\"]\n}`\n          }],\n          temperature: 0.1,\n          max_tokens: 300 // Limit response size to reduce neurons\n        })\n      } catch (aiError) {\n        console.error('AI service error:', aiError)\n        // Fall back to keyword-based analysis\n        const messageLower = scrubbedMessage.toLowerCase()\n        const subjectLower = scrubbedSubject.toLowerCase()\n        \n        let inquiryType = 'general'\n        let priorityLevel = 'medium'\n        let shouldScheduleMeeting = false\n        let meetingDuration = '1 hour'\n        \n        // Check for urgency\n        const hasUrgentKeywords = /urgent|asap|immediately|emergency|critical|deadline|rush/i.test(messageLower + ' ' + subjectLower)\n        if (hasUrgentKeywords) {\n          priorityLevel = 'high'\n          inquiryType = 'urgent'\n          shouldScheduleMeeting = true\n          meetingDuration = '2 hours'\n        }\n        \n        // Check for project keywords\n        const hasProjectKeywords = /project|development|implementation|integration|migration|modernization|strategy|planning/i.test(messageLower)\n        if (hasProjectKeywords) {\n          inquiryType = 'project'\n          shouldScheduleMeeting = true\n          meetingDuration = '1.5 hours'\n        }\n        \n        // Check for consultation keywords\n        const hasConsultationKeywords = /consultation|advice|guidance|help|support|discussion/i.test(messageLower)\n        if (hasConsultationKeywords) {\n          inquiryType = 'consultation'\n          shouldScheduleMeeting = true\n          meetingDuration = '1 hour'\n        }\n\n                 // Create fallback analysis with contextual follow-up questions based on missing information\n         const basicFollowUps = []\n         \n         // Analyze what information is missing from the message\n         const hasTimeline = /timeline|deadline|schedule|when|time|duration/i.test(messageLower)\n         const hasTeamSize = /team|team size|developers|staff|people|employees|users/i.test(messageLower)\n         const hasBudget = /budget|cost|price|investment|funding/i.test(messageLower)\n         const hasTechnicalDetails = /technology|tech stack|framework|platform|api|database|infrastructure/i.test(messageLower)\n         const hasBusinessContext = /business|company|industry|sector|market|customers/i.test(messageLower)\n         const hasSpecificGoals = /goals|objectives|outcomes|results|success|metrics/i.test(messageLower)\n         \n         // Ask about missing critical information\n         if (!hasTimeline) {\n           basicFollowUps.push(\"What's your timeline for this project?\")\n         }\n         if (!hasTeamSize) {\n           basicFollowUps.push(\"How large is your team or organization?\")\n         }\n         if (!hasTechnicalDetails && (hasProjectKeywords || hasTechnicalKeywords)) {\n           basicFollowUps.push(\"What technologies or platforms are you currently using?\")\n         }\n         if (!hasBusinessContext) {\n           basicFollowUps.push(\"What industry or business context should I understand?\")\n         }\n         if (!hasSpecificGoals) {\n           basicFollowUps.push(\"What specific outcomes are you looking to achieve?\")\n         }\n         \n         // If we still don't have enough questions, add some general ones\n         if (basicFollowUps.length < 2) {\n           if (basicFollowUps.length === 0) {\n             basicFollowUps.push(\"What specific challenge are you facing?\")\n           }\n           basicFollowUps.push(\"How can I best help you achieve your goals?\")\n         }\n         \n         analysis = {\n           inquiryType,\n           priorityLevel,\n           industry: 'other',\n           projectScope: 'medium',\n           urgency: hasUrgentKeywords ? 'immediate' : 'flexible',\n           suggestedResponse: `Thank you for reaching out, ${name}! I've received your inquiry about \"${scrubbedSubject}\" and I'm looking forward to discussing how I can help with your project.`,\n           relevantContent: ['general portfolio'],\n           confidence: 0.6,\n           shouldScheduleMeeting,\n           meetingType: shouldScheduleMeeting ? 'general-discussion' : 'consultation',\n           meetingDuration: '1 hour',\n           recommendedTimeSlots: ['morning', 'afternoon'],\n           timezoneConsideration: 'user\\'s local timezone',\n           userTimezone: 'America/New_York',\n           followUpRequired: shouldScheduleMeeting,\n           redFlags,\n           followUpQuestions: basicFollowUps,\n           timestamp: new Date().toISOString(),\n           originalMessage: '[CONTENT_ANALYZED]',\n           wordCount: scrubbedMessage.split(' ').length,\n           hasCompany: !!company,\n           emailDomain: email ? email.split('@')[1] || 'unknown' : 'unknown',\n           fallback: true\n         }\n        \n        // Skip AI parsing since we're using fallback\n        aiResponse = null\n      }\n\n      // Parse AI response and extract JSON\n      if (aiResponse) {\n        try {\n          analysis = parseAIResponse(aiResponse.response)\n          analysis = validateAIResponse(analysis)\n        } catch (parseError) {\n          console.error('AI response parsing error:', parseError)\n          // Fallback analysis if AI response parsing fails\n          const basicFollowUps = [\"What specific challenge are you facing?\", \"How can I best help you achieve your goals?\"]\n          \n          analysis = {\n            inquiryType: 'general',\n            priorityLevel: 'medium',\n            industry: 'other',\n            projectScope: 'medium',\n            urgency: 'flexible',\n            messageType: 'meeting-request',\n            meetingDuration: '1 hour',\n            suggestedResponse: `Thank you for reaching out, ${name}! I've received your inquiry about \"${scrubbedSubject}\" and I'm looking forward to discussing how I can help with your project.`,\n            relevantContent: ['general portfolio'],\n            confidence: 0.6,\n            shouldScheduleMeeting: true,\n            meetingType: 'general-discussion',\n            recommendedTimeSlots: ['morning', 'afternoon'],\n            timezoneConsideration: 'user\\'s local timezone',\n            userTimezone: 'America/New_York',\n            followUpRequired: true,\n            redFlags,\n            followUpQuestions: basicFollowUps,\n            timestamp: new Date().toISOString(),\n            originalMessage: '[CONTENT_ANALYZED]',\n            wordCount: scrubbedMessage.split(' ').length,\n            hasCompany: !!company,\n            emailDomain: email ? email.split('@')[1] || 'unknown' : 'unknown',\n            fallback: true\n          }\n        }\n      } else {\n        // If aiResponse is null, create fallback analysis\n        const basicFollowUps = [\"What specific challenge are you facing?\", \"How can I best help you achieve your goals?\"]\n        \n        analysis = {\n          inquiryType: 'general',\n          priorityLevel: 'medium',\n          industry: 'other',\n          projectScope: 'medium',\n          urgency: 'flexible',\n          messageType: 'message',\n          meetingDuration: '1 hour',\n          suggestedResponse: `Thank you for reaching out, ${name}! I've received your inquiry about \"${scrubbedSubject}\" and I'm looking forward to discussing how I can help with your project.`,\n          relevantContent: ['general portfolio'],\n          confidence: 0.6,\n          shouldScheduleMeeting: false,\n          meetingType: 'general-discussion',\n          recommendedTimeSlots: ['morning', 'afternoon'],\n          timezoneConsideration: 'user\\'s local timezone',\n          userTimezone: 'America/New_York',\n          followUpRequired: false,\n          redFlags,\n          followUpQuestions: basicFollowUps,\n          timestamp: new Date().toISOString(),\n          originalMessage: '[CONTENT_ANALYZED]',\n          wordCount: scrubbedMessage.split(' ').length,\n          hasCompany: !!company,\n          emailDomain: email ? email.split('@')[1] || 'unknown' : 'unknown',\n          fallback: true\n        }\n      }\n\n      // Ensure all required fields exist with defaults\n      const defaultAnalysis = {\n        inquiryType: 'general',\n        priorityLevel: 'medium',\n        industry: 'other',\n        projectScope: 'medium',\n        urgency: 'flexible',\n        messageType: 'message',\n        meetingDuration: '1 hour',\n        suggestedResponse: `Thank you for reaching out, ${name}! I've received your inquiry about \"${scrubbedSubject}\" and I'm looking forward to discussing how I can help with your project.`,\n        relevantContent: ['general portfolio'],\n        confidence: 0.8,\n        shouldScheduleMeeting: false,\n        meetingType: 'general-discussion',\n        recommendedTimeSlots: ['morning', 'afternoon'],\n        timezoneConsideration: 'user\\'s local timezone',\n        userTimezone: 'America/New_York',\n        followUpRequired: false,\n        redFlags: [],\n        followUpQuestions: [],\n        timestamp: new Date().toISOString(),\n        originalMessage: '[CONTENT_ANALYZED]',\n        wordCount: scrubbedMessage.split(' ').length,\n        hasCompany: !!company,\n        emailDomain: email ? email.split('@')[1] || 'unknown' : 'unknown'\n      }\n      \n      // Remove any AI-set confidence to ensure our calculation takes precedence\n      delete analysis.confidence\n      \n      // Merge with defaults for missing fields\n      analysis = { ...defaultAnalysis, ...analysis }\n      \n      // Set the deterministic meeting duration (calculated earlier)\n      analysis.meetingDuration = deterministicDuration\n      \n      // Update the suggested response to include the deterministic duration\n      if (analysis.suggestedResponse) {\n        // Remove any existing duration mentions and add the deterministic one\n        const baseResponse = analysis.suggestedResponse\n          .replace(/for \\d+ (minutes?|hours?|hours?)/gi, '')\n          .replace(/in \\d+ (minutes?|hours?|hours?)/gi, '')\n          .replace(/a \\d+ (minutes?|hours?|hours?) meeting/gi, '')\n          .trim()\n        \n        analysis.suggestedResponse = `${baseResponse} I'd be happy to schedule a ${deterministicDuration} meeting to discuss this further.`\n      }\n\n      // Add metadata\n      const enhancedAnalysis = {\n        ...analysis,\n        timestamp: new Date().toISOString(),\n        originalMessage: '[CONTENT_ANALYZED]', // Don't store original message\n        wordCount: scrubbedMessage.split(' ').length,\n        hasCompany: !!company,\n        emailDomain: email ? email.split('@')[1] || 'unknown' : 'unknown',\n        fallback: false // Explicitly mark as successful AI analysis\n      }\n      \n      // ALWAYS calculate confidence based on actual data quality, overriding any AI-set value\n      enhancedAnalysis.confidence = calculateConfidence({\n        name,\n        email,\n        company,\n        subject: scrubbedSubject,\n        message: scrubbedMessage,\n        analysis: enhancedAnalysis\n      })\n      \n      // Log only timing and status (no content)\n      console.log(`AI analysis completed: ${Date.now()} - confidence: ${enhancedAnalysis.confidence} - redFlags: ${redFlags.length}`)\n      \n      return addCorsHeaders(new Response(JSON.stringify(enhancedAnalysis), {\n        status: 200,\n        headers: {\n          'Content-Type': 'application/json',\n        },\n      }))\n\n    } catch (error) {\n      // Log error without sensitive data\n      console.error(`AI analysis error: ${error.message} - timestamp: ${Date.now()}`)\n      \n      return addCorsHeaders(new Response(JSON.stringify({ \n        error: error.message || 'AI analysis failed',\n        fallback: true,\n        timestamp: new Date().toISOString()\n      }), { \n        status: 500,\n        headers: { \n          'Content-Type': 'application/json',\n        }\n      }))\n    }\n  }\n}\n"],
  "mappings": "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",
  "names": ["analysis", "messageLower", "subjectLower", "hasUrgentKeywords", "hasProjectKeywords"]
}
